@page "/weather"
@rendermode InteractiveServer
@attribute [OutputCache(Duration = 5)]

@using System.ComponentModel.DataAnnotations
@using DaprSekiban.Domain.Aggregates.WeatherForecasts.Commands
@using DaprSekiban.Domain.Aggregates.WeatherForecasts.Queries
@using DaprSekiban.Domain.ValueObjects
@using DaprSekiban.Web.Services
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web

@inject WeatherApiClient WeatherApi
@inject IJSRuntime JsRuntime

<PageTitle>Weather</PageTitle>

<style>
    .sortable {
        cursor: pointer;
        user-select: none;
        position: relative;
        padding-right: 25px !important;
        transition: background-color 0.2s ease;
    }
    
    .sortable:hover {
        background-color: #e3f2fd;
    }
    
    .sortable.active {
        background-color: #bbdefb;
        font-weight: 600;
    }
    
    .sort-indicator {
        position: absolute;
        right: 5px;
        top: 50%;
        transform: translateY(-50%);
        font-size: 0.8em;
        opacity: 0.5;
        transition: opacity 0.2s ease;
        color: #666;
    }
    
    .sortable:hover .sort-indicator {
        opacity: 0.8;
    }
    
    .sortable.active .sort-indicator {
        opacity: 1;
        color: #1976d2;
        font-weight: bold;
    }
</style>

<h1>Weather</h1>

<div>
    <button class="btn btn-primary mb-3" @onclick="OpenAddForecastModal" @onclick:preventDefault="true">Add New Weather Forecast</button>
    <button class="btn btn-success mb-3 ms-2" @onclick="GenerateSampleData">Generate Sample Data</button>
</div>

<div class="d-flex justify-content-between align-items-center mb-3">
    <h3>Weather Forecasts</h3>
    <div class="d-flex align-items-center gap-2">
        <label for="pageSize" class="form-label mb-0">Items per page:</label>
        <select id="pageSize" class="form-select" style="width: auto;" @onchange="OnPageSizeChanged">
            <option value="5" selected="@(currentPageSize == 5)">5</option>
            <option value="10" selected="@(currentPageSize == 10)">10</option>
            <option value="20" selected="@(currentPageSize == 20)">20</option>
            <option value="50" selected="@(currentPageSize == 50)">50</option>
        </select>
    </div>
</div>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th class="sortable @(currentSortBy == nameof(WeatherForecastResponse.Location) ? "active" : "")" @onclick="() => HandleSort(nameof(WeatherForecastResponse.Location))">
                Location
                <span class="sort-indicator">
                    @if (currentSortBy == nameof(WeatherForecastResponse.Location))
                    {
                        @(currentIsAsc ? "▲" : "▼")
                    }
                    else
                    {
                        @("⇅")
                    }
                </span>
            </th>
            <th class="sortable @(currentSortBy == nameof(WeatherForecastResponse.Date) ? "active" : "")" @onclick="() => HandleSort(nameof(WeatherForecastResponse.Date))">
                Date
                <span class="sort-indicator">
                    @if (currentSortBy == nameof(WeatherForecastResponse.Date))
                    {
                        @(currentIsAsc ? "▲" : "▼")
                    }
                    else
                    {
                        @("⇅")
                    }
                </span>
            </th>
            <th class="sortable @(currentSortBy == nameof(WeatherForecastResponse.TemperatureC) ? "active" : "")" @onclick="() => HandleSort(nameof(WeatherForecastResponse.TemperatureC))" aria-label="Temperature in Celsius">
                Temp. (C)
                <span class="sort-indicator">
                    @if (currentSortBy == nameof(WeatherForecastResponse.TemperatureC))
                    {
                        @(currentIsAsc ? "▲" : "▼")
                    }
                    else
                    {
                        @("⇅")
                    }
                </span>
            </th>
            <th class="sortable @(currentSortBy == nameof(WeatherForecastResponse.TemperatureF) ? "active" : "")" @onclick="() => HandleSort(nameof(WeatherForecastResponse.TemperatureF))" aria-label="Temperature in Farenheit">
                Temp. (F)
                <span class="sort-indicator">
                    @if (currentSortBy == nameof(WeatherForecastResponse.TemperatureF))
                    {
                        @(currentIsAsc ? "▲" : "▼")
                    }
                    else
                    {
                        @("⇅")
                    }
                </span>
            </th>
            <th class="sortable @(currentSortBy == nameof(WeatherForecastResponse.Summary) ? "active" : "")" @onclick="() => HandleSort(nameof(WeatherForecastResponse.Summary))">
                Summary
                <span class="sort-indicator">
                    @if (currentSortBy == nameof(WeatherForecastResponse.Summary))
                    {
                        @(currentIsAsc ? "▲" : "▼")
                    }
                    else
                    {
                        @("⇅")
                    }
                </span>
            </th>
            <th class="sortable @(currentSortBy == nameof(WeatherForecastResponse.UpdatedAt) ? "active" : "")" @onclick="() => HandleSort(nameof(WeatherForecastResponse.UpdatedAt))">
                Updated At
                <span class="sort-indicator">
                    @if (currentSortBy == nameof(WeatherForecastResponse.UpdatedAt))
                    {
                        @(currentIsAsc ? "▲" : "▼")
                    }
                    else
                    {
                        @("⇅")
                    }
                </span>
            </th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Location</td>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC.ToString("F1")°C</td>
                    <td>@forecast.TemperatureF.ToString("F1")°F</td>
                    <td>@forecast.Summary</td>
                    <td>@forecast.UpdatedAt.ToLocalTime().ToString("yyyy/MM/dd HH:mm:ss")</td>
                    <td>
                        <button class="btn btn-primary btn-sm me-2" @onclick="() => OpenEditLocationModal(forecast)">Edit Location</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => HandleRemoveForecast(forecast.WeatherForecastId)">Remove</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    
    <!-- Pagination Controls -->
    <nav aria-label="Weather forecast pagination">
        <ul class="pagination justify-content-center">
            <li class="page-item @(currentPage <= 1 ? "disabled" : "")">
                <button class="page-link" @onclick="() => GoToPage(1)" disabled="@(currentPage <= 1)">First</button>
            </li>
            <li class="page-item @(currentPage <= 1 ? "disabled" : "")">
                <button class="page-link" @onclick="() => GoToPage(currentPage - 1)" disabled="@(currentPage <= 1)">Previous</button>
            </li>
            
            @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
            {
                var pageNumber = i;
                <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                    <button class="page-link" @onclick="() => GoToPage(pageNumber)">@pageNumber</button>
                </li>
            }
            
            <li class="page-item @(currentPage >= totalPages ? "disabled" : "")">
                <button class="page-link" @onclick="() => GoToPage(currentPage + 1)" disabled="@(currentPage >= totalPages)">Next</button>
            </li>
            <li class="page-item @(currentPage >= totalPages ? "disabled" : "")">
                <button class="page-link" @onclick="() => GoToPage(totalPages)" disabled="@(currentPage >= totalPages)">Last</button>
            </li>
        </ul>
    </nav>
    
    <div class="text-center text-muted">
        Page @currentPage of @totalPages (Total items: @totalItems)
    </div>
}

<div class="modal fade" id="addForecastModal" data-bs-backdrop="static" tabindex="-1" aria-labelledby="addForecastModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <EditForm FormName="weather-forecast" Model="@forecastModel" OnValidSubmit="HandleAddForecastSubmit">
                <div class="modal-header">
                    <h5 class="modal-title" id="addForecastModalLabel">Add Weather Forecast</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label for="location" class="form-label">Location</label>
                        <InputText id="location" class="form-control" @bind-Value="forecastModel.Location" />
                        <ValidationMessage For="@(() => forecastModel.Location)" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="date" class="form-label">Date</label>
                        <InputDate id="date" class="form-control" @bind-Value="forecastModel.Date" />
                        <ValidationMessage For="@(() => forecastModel.Date)" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="temperatureC" class="form-label">Temperature (°C)</label>
                        <InputNumber id="temperatureC" class="form-control" @bind-Value="forecastModel.TemperatureC" step="0.1" />
                    </div>
                    <div class="mb-3">
                        <label for="summary" class="form-label">Summary</label>
                        <InputSelect id="summary" class="form-select" @bind-Value="forecastModel.Summary">
                            <option value="">Select a summary...</option>
                            @foreach (var summary in summaries)
                            {
                                <option value="@summary">@summary</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => forecastModel.Summary)" class="text-danger" />
                    </div>
                    @if (!string.IsNullOrEmpty(forecastModel.Error))
                    {
                        <div class="alert alert-danger" role="alert">
                            @forecastModel.Error
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Add Forecast</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<div class="modal fade" id="editLocationModal" data-bs-backdrop="static" tabindex="-1" aria-labelledby="editLocationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <EditForm FormName="edit-location" Model="@editLocationModel" OnValidSubmit="HandleEditLocationSubmit">
                <div class="modal-header">
                    <h5 class="modal-title" id="editLocationModalLabel">Edit Location</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label for="editLocation" class="form-label">Location</label>
                        <InputText id="editLocation" class="form-control" @bind-Value="editLocationModel.Location" />
                        <ValidationMessage For="@(() => editLocationModel.Location)" class="text-danger" />
                    </div>
                    @if (!string.IsNullOrEmpty(editLocationModel.Error))
                    {
                        <div class="alert alert-danger" role="alert">
                            @editLocationModel.Error
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Update Location</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private List<WeatherForecastResponse>? forecasts;
    private readonly string[] summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
    private ForecastModel forecastModel = new();
    private EditLocationModel editLocationModel = new();

    private int currentPage = 1;
    private int totalPages = 1;
    private int totalItems = 0;
    private int currentPageSize = 5;
    private string currentSortBy = nameof(WeatherForecastResponse.Date);
    private bool currentIsAsc = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadForecasts();
    }

    private async Task LoadForecasts(string? waitForSortableUniqueId = null)
    {
        Console.WriteLine($"Loading forecasts with waitForSortableUniqueId: {waitForSortableUniqueId}");
        forecasts = await WeatherApi.GetWeatherForecastsAsync(waitForSortableUniqueId: waitForSortableUniqueId, pageSize: currentPageSize, pageNumber: currentPage, sortBy: currentSortBy, isAsc: currentIsAsc);
        Console.WriteLine($"Loaded {forecasts?.Count ?? 0} forecasts");
        
        // Get total count by fetching all items without pagination
        var allForecasts = await WeatherApi.GetWeatherForecastsAsync(waitForSortableUniqueId: waitForSortableUniqueId);
        totalItems = allForecasts?.Count ?? 0;
        totalPages = (int)Math.Ceiling((double)totalItems / currentPageSize);
        
        // Ensure current page is within valid range
        if (currentPage > totalPages && totalPages > 0)
        {
            currentPage = totalPages;
            // Reload with correct page
            forecasts = await WeatherApi.GetWeatherForecastsAsync(waitForSortableUniqueId: waitForSortableUniqueId, pageSize: currentPageSize, pageNumber: currentPage, sortBy: currentSortBy, isAsc: currentIsAsc);
        }
        
        if (forecasts != null)
        {
            foreach (var forecast in forecasts)
            {
                Console.WriteLine($"Forecast: {forecast.WeatherForecastId} - {forecast.Location} - {forecast.Date}");
            }
        }
    }

    private async Task OpenAddForecastModal()
    {
        try
        {
            forecastModel = new ForecastModel { Date = DateTime.Now };
            Console.WriteLine("About to call showModal for addForecastModal");
            await JsRuntime.InvokeVoidAsync("showModal", "addForecastModal");
            Console.WriteLine("showModal call completed");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error opening modal: {ex.Message}");
        }
    }

    private async Task OpenEditLocationModal(WeatherForecastResponse forecast)
    {
        editLocationModel = new EditLocationModel 
        { 
            WeatherForecastId = forecast.WeatherForecastId, 
            Location = forecast.Location 
        };
        await JsRuntime.InvokeVoidAsync("showModal", "editLocationModal");
    }

    private async Task CloseModal()
    {
        await JsRuntime.InvokeVoidAsync("hideModal", "addForecastModal");
        await JsRuntime.InvokeVoidAsync("hideModal", "editLocationModal");
    }

    private async Task HandleAddForecastSubmit()
    {
        try
        {
            var temperatureC = new TemperatureCelsius(forecastModel.TemperatureC);
            var command = new InputWeatherForecastCommand(
                forecastModel.Location,
                DateOnly.FromDateTime(forecastModel.Date),
                temperatureC,
                forecastModel.Summary);
            var result = await WeatherApi.AddWeatherForecastAsync(command);

            if (result != null)
            {
                // Reset form first
                forecastModel = new ForecastModel { Date = DateTime.Now };
                
                // Close modal immediately for better UX
                await CloseModal();
                
                // Then load forecasts with the new event's sortable unique id
                await LoadForecasts(result.LastSortableUniqueId);
            }
            else
            {
                forecastModel.Error = "Failed to add weather forecast";
            }
        }
        catch (Exception ex)
        {
            forecastModel.Error = ex.Message;
        }
    }

    private async Task HandleEditLocationSubmit()
    {
        try
        {
            Console.WriteLine($"Updating location for WeatherForecastId: {editLocationModel.WeatherForecastId}, New Location: {editLocationModel.Location}");
            
            var result = await WeatherApi.UpdateLocationAsync(
                editLocationModel.WeatherForecastId,
                editLocationModel.Location);

            if (result != null)
            {
                Console.WriteLine($"Update location successful. LastSortableUniqueId: {result.LastSortableUniqueId}");
                
                // Close modal first for better UX
                await CloseModal();
                
                // Then reload with the new event's sortable unique id
                await LoadForecasts(result.LastSortableUniqueId);
            }
            else
            {
                editLocationModel.Error = "Failed to update location";
                Console.WriteLine("Update location failed - result is null");
            }
        }
        catch (Exception ex)
        {
            editLocationModel.Error = ex.Message;
            Console.WriteLine($"Error updating location: {ex.Message}");
        }
    }

    private async Task HandleRemoveForecast(Guid forecastId)
    {
        try
        {
            Console.WriteLine($"Removing WeatherForecastId: {forecastId}");
            
            var result = await WeatherApi.RemoveWeatherForecastAsync(forecastId);
            if (result != null)
            {
                Console.WriteLine($"Remove successful. LastSortableUniqueId: {result.LastSortableUniqueId}");
                await LoadForecasts(result.LastSortableUniqueId);
            }
            else
            {
                Console.WriteLine("Remove failed - result is null");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing weather forecast: {ex.Message}");
        }
    }

    private async Task GenerateSampleData()
    {
        try
        {
            var results = await WeatherApi.GenerateSampleDataAsync();
            if (results != null && results.Count > 0)
            {
                // Just reload the forecasts without waiting for specific sortable unique ID
                await LoadForecasts();
            }
            else
            {
                await LoadForecasts();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error generating sample data: {ex.Message}");
        }
    }

    private async Task GoToPage(int pageNumber)
    {
        if (pageNumber < 1 || pageNumber > totalPages)
            return;

        currentPage = pageNumber;
        await LoadForecasts();
    }

    private async Task OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newSize))
        {
            currentPageSize = newSize;
            currentPage = 1; // Reset to first page
            await LoadForecasts();
        }
    }

    private void HandleSort(string column)
    {
        if (currentSortBy == column)
        {
            currentIsAsc = !currentIsAsc; // Toggle sort direction
        }
        else
        {
            currentSortBy = column;
            currentIsAsc = true; // Default to ascending sort on new column
        }
        LoadForecasts();
    }

    private string GetSortIndicatorClass(string column)
    {
        if (currentSortBy != column)
            return "default";

        return currentIsAsc ? "asc" : "desc";
    }

    private class ForecastModel
    {
        [Required(ErrorMessage = "Location is required")]
        public string Location { get; set; } = string.Empty;

        [Required(ErrorMessage = "Date is required")]
        public DateTime Date { get; set; } = DateTime.Now;

        [Range(-273.15, 100.0, ErrorMessage = "Temperature must be between -273.15 and 100")]
        public double TemperatureC { get; set; } = 20.0;

        [Required(ErrorMessage = "Summary is required")]
        public string? Summary { get; set; }

        public string? Error { get; set; }
    }

    private class EditLocationModel
    {
        public Guid WeatherForecastId { get; set; }

        [Required(ErrorMessage = "Location is required")]
        public string Location { get; set; } = string.Empty;

        public string? Error { get; set; }
    }
}
