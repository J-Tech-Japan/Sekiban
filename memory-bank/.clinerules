# Sekiban Project Intelligence

This file captures important patterns, preferences, and project intelligence for working with the Sekiban event sourcing framework.

## Naming Conventions

1. **Aggregates**
   - Use nouns representing domain entities
   - Implement `IAggregatePayload` interface
   - Use C# records for immutability
   - Include `[GenerateSerializer]` attribute for Orleans

2. **Commands**
   - Use imperative verbs (Create, Update, Delete)
   - Implement `ICommandWithHandler<TCommand, TProjector>` interface
   - Use C# records for immutability
   - Include `[GenerateSerializer]` attribute

3. **Events**
   - Use past tense verbs (Created, Updated, Deleted)
   - Implement `IEventPayload` interface
   - Use C# records for immutability
   - Include `[GenerateSerializer]` attribute

4. **Projectors**
   - Name after the aggregate they project (e.g., `UserProjector`)
   - Implement `IAggregateProjector` interface
   - Use pattern matching for state transitions

5. **Queries**
   - Use descriptive names indicating the data being retrieved
   - Implement appropriate query interface
   - Use C# records for immutability
   - Include `[GenerateSerializer]` attribute

## Critical Implementation Paths

1. **Command Execution Flow**
   ```
   Command → SpecifyPartitionKeys → Handle → Event(s) → Event Store → Projector → Updated State
   ```

2. **Query Execution Flow**
   ```
   Query → HandleFilter → HandleSort → Results
   ```

3. **State Transition Flow**
   ```
   Event → Projector → (payload, event) switch → New State
   ```

4. **API Endpoint Registration**
   ```
   builder.Services.AddSingleton(DomainTypes.Generate()) → app.MapPost/MapGet → SekibanOrleansExecutor.CommandAsync/QueryAsync
   ```

5. **Event Remover Registration**
   ```
   // Register the Repository
   builder.Services.AddSingleton<Repository>();
   
   // Register the InMemoryEventWriter as both IEventWriter and IEventRemover
   builder.Services.AddSingleton<InMemoryEventWriter>();
   builder.Services.AddSingleton<IEventWriter>(sp => sp.GetRequiredService<InMemoryEventWriter>());
   builder.Services.AddSingleton<IEventRemover>(sp => sp.GetRequiredService<InMemoryEventWriter>());
   ```

6. **Event Removal Flow**
   ```
   IEventRemover.RemoveAllEvents() → Repository.ClearAllEvents() → _events.Clear()
   ```

## Project-Specific Patterns

1. **State Machine Pattern**
   - Use different payload types to represent different states
   - Use the third generic parameter in `ICommandWithHandler<TCommand, TProjector, TPayloadType>` to enforce state-based constraints
   - Implement state transitions in projectors using pattern matching

2. **Result Boxing Pattern**
   - Use `ResultBox<T>` to handle success and error cases
   - Use `UnwrapBox()` to extract results or throw exceptions
   - Chain operations with `Conveyor` for functional composition

3. **Partition Key Pattern**
   - For new aggregates: `PartitionKeys.Generate<YourProjector>()`
   - For existing aggregates: `PartitionKeys.Existing<YourProjector>(aggregateId)`
   - Use RootPartitionKey for multi-tenancy when needed

4. **Multiple Events Pattern**
   - Use `context.AppendEvent(eventPayload)` to add multiple events
   - Return `EventOrNone.None` when using AppendEvent
   - Or return the last event using `EventOrNone.Event`

5. **Event Removal Pattern**
   - Use `IEventRemover` interface for event removal operations
   - Implement thread-safe event removal in storage backends
   - Use `RemoveAllEvents()` method to clear all events
   - Return a Task that represents the asynchronous operation
   - Consider implementing selective event removal in the future

## Known Challenges

1. **Large Projection Performance**
   - Multi-aggregate projections must fit in memory
   - Consider using materialized views for large data sets
   - Use snapshots to optimize state reconstruction

2. **Event Schema Evolution**
   - Plan for event schema changes
   - Use event versioning for forward compatibility
   - Consider using event upcasters for complex migrations

3. **Orleans Configuration**
   - Ensure proper silo configuration for production
   - Consider grain persistence strategy based on expected load
   - Monitor grain activations and performance

## User Preferences

1. **Project Structure**
   - Organize by feature rather than by type
   - Keep related aggregates, commands, events, and projectors together
   - Use clear, descriptive file names

2. **Code Style**
   - Use C# records for immutable data structures
   - Prefer expression-bodied members for concise code
   - Use pattern matching for state transitions
   - Leverage C# 9+ features for cleaner code

3. **Documentation**
   - Document the purpose of each aggregate, command, and event
   - Include examples for complex operations
   - Document state transitions and business rules

## Tool Usage Patterns

1. **Project Templates**
   ```bash
   dotnet new install Sekiban.Pure.Templates
   dotnet new sekiban-orleans-aspire -n MyProject
   ```

2. **Running the Application**
   ```bash
   dotnet run --project MyProject.AppHost
   ```

3. **Testing Commands**
   ```csharp
   // Arrange
   var command = new YourCommand(...);
   
   // Act
   var result = await executor.CommandAsync(command);
   
   // Assert
   result.IsSuccess.Should().BeTrue();
   ```

4. **Testing Projections**
   ```csharp
   // Arrange
   var events = new List<IEvent> { new EventDocument<YourEvent>(new YourEvent(...)) };
   
   // Act
   var aggregate = projector.ProjectEvents(events);
   
   // Assert
   aggregate.Payload.Should().BeOfType<YourAggregateState>();
   ```

5. **Using Event Removal**
   ```csharp
   // Get the event remover from DI
   var eventRemover = serviceProvider.GetRequiredService<IEventRemover>();
   
   // Remove all events
   await eventRemover.RemoveAllEvents();
   
   // Verify events were removed
   var repository = serviceProvider.GetRequiredService<Repository>();
   repository.Events.Should().BeEmpty();
   ```

## Evolution of Project Decisions

1. **Storage Backend Evolution**
   - Started with Azure Cosmos DB
   - Added Amazon DynamoDB support
   - Added PostgreSQL support
   - Each backend has specific optimization strategies

2. **Orleans Integration**
   - Added to support distributed processing
   - Enables horizontal scaling
   - Provides virtual actor model for simpler concurrency

3. **API Design Evolution**
   - Moved toward more functional approach
   - Enhanced type safety with generic constraints
   - Improved error handling with ResultBox

4. **Project Template Evolution**
   - Started with basic templates
   - Added Orleans integration
   - Added Aspire support
   - Continuing to expand template options
