using FeatureCheck.Domain.Aggregates.Branches.Commands;
using FeatureCheck.Domain.Aggregates.Clients;
using FeatureCheck.Domain.Aggregates.Clients.Commands;
using FeatureCheck.Domain.Aggregates.Clients.Events;
using FeatureCheck.Domain.Aggregates.LoyaltyPoints.Commands;
using FeatureCheck.Domain.Aggregates.LoyaltyPoints.Consts;
using FeatureCheck.Domain.Shared;
using FeatureCheck.Domain.Shared.Exceptions;
using FeatureCheck.Test.AggregateTests.CommandsHelpers;
using Sekiban.Core.Aggregate;
using Sekiban.Core.Exceptions;
using Sekiban.Testing.SingleProjections;
using System;
using Xunit;
namespace FeatureCheck.Test.AggregateTests;

public class ClientSpec : AggregateTest<Client, FeatureCheckDependency>
{
    private const string testClientName = "TestName";
    private const string testClientChangedName = "TestName2";
    private const string testEmail = "test@example.com";

    [Fact(DisplayName = "Execute the aggregate command and test it.")]
    public void ClientCreateSpec()
    {
        // Create command refers to the Branch, so flow the command to create the Branch.
        var branchId = RunEnvironmentCommand(new CreateBranch("TEST"));
        // Given
        // CreateClient Command will be executed
        WhenCommand(new CreateClient(branchId, testClientName, testEmail));
        // Command not throws an exception
        ThenNotThrowsAnException();
        // Verify the events generated by the command.
        ThenLastSingleEventPayloadIs(new ClientCreated(branchId, testClientName, testEmail));
        // Verify the status of the current aggregate.
        ThenStateIs(
            new AggregateState<Client>
            {
                AggregateId = GetAggregateId(), Version = GetCurrentVersion(), Payload = new Client(branchId, testClientName, testEmail)
            });
        // Execute the rename command.
        WhenCommand(client => new ChangeClientName(client.AggregateId, testClientChangedName) { ReferenceVersion = client.Version });
        WriteStateToFile("ClientCreateSpec.json");
        // Verify the events generated by the command.
        ThenLastSingleEventPayloadIs(new ClientNameChanged(testClientChangedName));
        // Verify the status of the current aggregate.
        ThenStateIs(
            new AggregateState<Client>
            {
                AggregateId = GetAggregateId(), Version = GetCurrentVersion(), Payload = new Client(branchId, testClientChangedName, testEmail)
            });
    }

    [Fact(DisplayName = "If a duplicate email address exists, the creation fails.")]
    public void ClientCreateDuplicateEmailSpec()
    {
        var branchId = RunEnvironmentCommand(new CreateBranch("TEST"));
        RunEnvironmentCommand(new CreateClient(branchId, "NOT DUPLICATED NAME", testEmail));
        WhenCommand(new CreateClient(branchId, testClientName, testEmail)).ThenThrows<SekibanEmailAlreadyRegistered>();
    }

    [Fact]
    public void UseCommandExecutor()
    {
        GivenEnvironmentCommandExecutorAction(BranchClientCommandsHelper.CreateClient)
            .WhenCommand(new CreateClient(BranchClientCommandsHelper.BranchId, "CreateClient Name New", BranchClientCommandsHelper.FirstClientEmail))
            .ThenThrows<SekibanEmailAlreadyRegistered>();
    }

    [Fact]
    public void UseCommandExecutorSimpleThrows()
    {
        GivenEnvironmentCommandExecutorAction(BranchClientCommandsHelper.CreateClient)
            .WhenCommand(new CreateClient(BranchClientCommandsHelper.BranchId, "CreateClient Name New", BranchClientCommandsHelper.FirstClientEmail))
            .ThenThrowsAnException();
    }

    [Fact]
    public void EnvironmentChangeCommandTest()
    {
        var branchId = RunEnvironmentCommand(new CreateBranch("TEST"));
        var otherClientId = Guid.NewGuid();
        RunEnvironmentCommand(new CreateClient { BranchId = branchId, ClientName = "NameFirst", ClientEmail = "test@example.com" }, otherClientId);
        RunEnvironmentCommand(new ChangeClientName(otherClientId, "Other CreateClient Name"));
        RunEnvironmentCommand(new CreateLoyaltyPoint(otherClientId, 100));
        RunEnvironmentCommand(new UseLoyaltyPoint(otherClientId, DateTime.Today, LoyaltyPointUsageTypeKeys.TravelCarRental, 30, "test"));
    }

    [Fact(DisplayName = "Can not delete client twice")]
    public void CanNotDeleteClientTwice()
    {
        var branchId = RunEnvironmentCommand(new CreateBranch("TEST"));
        WhenCommand(new CreateClient(branchId, "client", "client@example.com"))
            .ThenNotThrowsAnException()
            .WhenCommand(new DeleteClient(GetAggregateId()) { ReferenceVersion = GetCurrentVersion() })
            .ThenNotThrowsAnException()
            .WhenCommand(new DeleteClient(GetAggregateId()) { ReferenceVersion = GetCurrentVersion() })
            .ThenThrows<SekibanAggregateAlreadyDeletedException>();
    }

    [Fact(DisplayName = "Can Cancel Delete")]
    public void CanCancelClientDelete()
    {
        var branchId = RunEnvironmentCommand(new CreateBranch("TEST"));
        WhenCommand(new CreateClient(branchId, "client", "client@example.com"))
            .ThenNotThrowsAnException()
            .WhenCommand(new DeleteClient(GetAggregateId()) { ReferenceVersion = GetCurrentVersion() })
            .ThenNotThrowsAnException()
            .ThenGetPayload(payload => Assert.True(payload.IsDeleted))
            .WhenCommand(
                new CancelDeleteClient { ReferenceVersion = GetCurrentVersion(), ClientId = GetAggregateId(), Reason = "Deleted by mistake" })
            .ThenNotThrowsAnException()
            .ThenGetPayload(payload => Assert.False(payload.IsDeleted));
    }
}
