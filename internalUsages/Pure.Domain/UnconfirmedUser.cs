using Sekiban.Pure;
namespace Pure.Domain;

public record UnconfirmedUser(string Name, string Email) : IAggregatePayload;
// public class Test
// {
//     public void Test1()
//     {
//         var commandExecutor = new CommandExecutor();
//         commandExecutor.Execute(new RegisterBranch("name"));
//         commandExecutor.Execute(
//             new RegisterUser("tomo", "tomo@example.com"),
//             new RegisterUser.Injection(email => false));
//         commandExecutor.Execute(new ConfirmUser(GuidExtensions.CreateVersion7()));
//     }
// }

// public static class Extensions
// {
//     public static Task<ResultBox<CommandResponse>> ExecuteFunction(
//         this CommandExecutor executor,
//         ConfirmUser command,
//         IAggregateProjector projector,
//         Func<ConfirmUser, PartitionKeys> specifyPartitionKeys,
//         Func<ConfirmUser, ICommandContext<UnconfirmedUser>, ResultBox<EventOrNone>> handler) =>
//         executor.ExecuteFunction<ConfirmUser, UnconfirmedUser>(
//             command,
//             (command as ICommandGetProjector).GetProjector(),
//             command.SpecifyPartitionKeys,
//             command.Handle);
// }
// now writing manually, but it will be generated by the source generator
// public class DomainEventTypes : IEventTypes
// {
//     public ResultBox<IEvent> GenerateTypedEvent(
//         IEventPayload payload,
//         PartitionKeys partitionKeys,
//         string sortableUniqueId,
//         int version) => payload switch
//     {
//         UserRegistered userRegistered => new Event<UserRegistered>(
//             userRegistered,
//             partitionKeys,
//             sortableUniqueId,
//             version),
//         UserConfirmed userConfirmed => new Event<UserConfirmed>(
//             userConfirmed,
//             partitionKeys,
//             sortableUniqueId,
//             version),
//         UserUnconfirmed userUnconfirmed => new Event<UserUnconfirmed>(
//             userUnconfirmed,
//             partitionKeys,
//             sortableUniqueId,
//             version),
//         BranchCreated branchCreated => new Event<BranchCreated>(
//             branchCreated,
//             partitionKeys,
//             sortableUniqueId,
//             version),
//         BranchNameChanged branchNameChanged => new Event<BranchNameChanged>(
//             branchNameChanged,
//             partitionKeys,
//             sortableUniqueId,
//             version),
//         _ => ResultBox<IEvent>.FromException(
//             new SekibanEventTypeNotFoundException($"Event Type {payload.GetType().Name} Not Found"))
//     };
// }
// public class CpPureDomainEventTypes : IEventTypes
// {
//     public ResultBox<IEvent> GenerateTypedEvent(
//         IEventPayload payload,
//         PartitionKeys partitionKeys,
//         string sortableUniqueId,
//         int version) => payload switch
//     {
//         UserRegistered userregistered => new Event<UserRegistered>(
//             userregistered,
//             partitionKeys,
//             sortableUniqueId,
//             version),
//         UserConfirmed userconfirmed => new Event<UserConfirmed>(
//             userconfirmed,
//             partitionKeys,
//             sortableUniqueId,
//             version),
//         UserUnconfirmed userunconfirmed => new Event<UserUnconfirmed>(
//             userunconfirmed,
//             partitionKeys,
//             sortableUniqueId,
//             version),
//         BranchCreated branchcreated => new Event<BranchCreated>(
//             branchcreated,
//             partitionKeys,
//             sortableUniqueId,
//             version),
//         BranchNameChanged branchnamechanged => new Event<BranchNameChanged>(
//             branchnamechanged,
//             partitionKeys,
//             sortableUniqueId,
//             version),
//         ShoppingCartCreated shoppingcartcreated => new Event<ShoppingCartCreated>(
//             shoppingcartcreated,
//             partitionKeys,
//             sortableUniqueId,
//             version),
//         ShoppingCartItemAdded shoppingcartitemadded => new Event<ShoppingCartItemAdded>(
//             shoppingcartitemadded,
//             partitionKeys,
//             sortableUniqueId,
//             version),
//         PaymentProcessedShoppingCart paymentprocessedshoppingcart => new Event<PaymentProcessedShoppingCart>(
//             paymentprocessedshoppingcart,
//             partitionKeys,
//             sortableUniqueId,
//             version),
//         _ => ResultBox<IEvent>.FromException(
//             new SekibanEventTypeNotFoundException($"Event Type {payload.GetType().Name} Not Found"))
//     };
// }
