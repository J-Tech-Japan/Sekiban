@page "/weather"
@attribute [StreamRendering(true)]
@rendermode InteractiveServer

@using Dcb.Domain.Projections
@using Dcb.Domain.Weather
@using System.ComponentModel.DataAnnotations
@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms

@inject WeatherApiClient WeatherApiClient
@inject IJSRuntime JsRuntime
@inject ILogger<Weather> Logger

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<div>
    <button class="btn btn-primary mb-3" @onclick="OpenAddForecastModal">Add New Weather Forecast</button>
</div>

<h3>Weather Forecasts</h3>

<div class="row mb-3">
    <div class="col-auto">
        <label class="col-form-label">Page Size:</label>
    </div>
    <div class="col-auto">
        <select class="form-select" @onchange="OnPageSizeChanged">
            <option value="5" selected="@(pageSize == 5)">5</option>
            <option value="10" selected="@(pageSize == 10)">10</option>
            <option value="20" selected="@(pageSize == 20)">20</option>
            <option value="50" selected="@(pageSize == 50)">50</option>
        </select>
    </div>
    <div class="col-auto">
        <span class="col-form-label text-muted">
            @if (forecasts != null)
            {
                @:Showing @forecasts.Count items
            }
        </span>
    </div>
</div>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else if (forecasts.Count == 0)
{
    <p>No weather forecasts available. Click "Add New Weather Forecast" to create one.</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Location</th>
            <th>Date</th>
            <th aria-label="Temperature in Celsius">Temp. (C)</th>
            <th aria-label="Temperature in Fahrenheit">Temp. (F)</th>
            <th>Summary</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Location</td>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@(32 + (int)(forecast.TemperatureC / 0.5556))</td>
                    <td>@forecast.Summary</td>
                    <td>
                        <button class="btn btn-primary btn-sm me-2" @onclick="() => OpenEditLocationModal(forecast)">Edit Location</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => HandleRemoveForecast(forecast.ForecastId)">Remove</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    
    <div class="d-flex justify-content-between align-items-center mt-3">
        <div>
            <nav aria-label="Weather forecast pagination">
                <ul class="pagination">
                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                        <button class="page-link" @onclick="() => ChangePage(currentPage - 1)" disabled="@(currentPage == 1)">
                            Previous
                        </button>
                    </li>
                    @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                    {
                        var pageNumber = i;
                        <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                            <button class="page-link" @onclick="() => ChangePage(pageNumber)">
                                @pageNumber
                            </button>
                        </li>
                    }
                    <li class="page-item @(currentPage == totalPages || totalPages == 0 ? "disabled" : "")">
                        <button class="page-link" @onclick="() => ChangePage(currentPage + 1)" disabled="@(currentPage == totalPages || totalPages == 0)">
                            Next
                        </button>
                    </li>
                </ul>
            </nav>
        </div>
        <div class="text-muted">
            Page @currentPage of @(totalPages > 0 ? totalPages : 1)
        </div>
    </div>
}

<!-- Add Forecast Modal -->
<div class="modal fade" id="addForecastModal" data-bs-backdrop="static" tabindex="-1" aria-labelledby="addForecastModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <EditForm FormName="weather-forecast" Model="@forecastModel" OnValidSubmit="HandleAddForecastSubmit">
                <div class="modal-header">
                    <h5 class="modal-title" id="addForecastModalLabel">Add Weather Forecast</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label for="location" class="form-label">Location</label>
                        <InputText id="location" class="form-control" @bind-Value="forecastModel.Location" />
                        <ValidationMessage For="@(() => forecastModel.Location)" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="date" class="form-label">Date</label>
                        <InputDate id="date" class="form-control" @bind-Value="forecastModel.Date" />
                        <ValidationMessage For="@(() => forecastModel.Date)" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="temperatureC" class="form-label">Temperature (Â°C)</label>
                        <InputNumber id="temperatureC" class="form-control" @bind-Value="forecastModel.TemperatureC" />
                        <ValidationMessage For="@(() => forecastModel.TemperatureC)" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="summary" class="form-label">Summary</label>
                        <InputSelect id="summary" class="form-select" @bind-Value="forecastModel.Summary">
                            <option value="">Select a summary...</option>
                            @foreach (var summary in summaries)
                            {
                                <option value="@summary">@summary</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => forecastModel.Summary)" class="text-danger" />
                    </div>
                    @if (!string.IsNullOrEmpty(forecastModel.Error))
                    {
                        <div class="alert alert-danger" role="alert">
                            @forecastModel.Error
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddModal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Add Forecast</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!-- Edit Location Modal -->
<div class="modal fade" id="editLocationModal" data-bs-backdrop="static" tabindex="-1" aria-labelledby="editLocationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <EditForm FormName="edit-location" Model="@editLocationModel" OnValidSubmit="HandleEditLocationSubmit">
                <div class="modal-header">
                    <h5 class="modal-title" id="editLocationModalLabel">Edit Location</h5>
                    <button type="button" class="btn-close" @onclick="CloseEditLocationModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label for="newLocation" class="form-label">New Location</label>
                        <InputText id="newLocation" class="form-control" @bind-Value="editLocationModel.NewLocationName" />
                        <ValidationMessage For="@(() => editLocationModel.NewLocationName)" class="text-danger" />
                    </div>
                    @if (!string.IsNullOrEmpty(editLocationModel.Error))
                    {
                        <div class="alert alert-danger" role="alert">
                            @editLocationModel.Error
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseEditLocationModal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Update Location</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private List<WeatherForecastItem>? forecasts;
    private WeatherForecastModel forecastModel = new();
    private EditLocationModel editLocationModel = new();
    private string[] summaries = ["Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"];
    private string? lastSortableUniqueId;
    
    // Pagination fields
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 1;
    private int totalItems = 0;

    public class WeatherForecastModel
    {
        [Required(ErrorMessage = "Location is required")]
        public string? Location { get; set; }

        [Required(ErrorMessage = "Date is required")]
        public DateTime? Date { get; set; } = DateTime.Today;

        [Range(-60, 60, ErrorMessage = "Temperature must be between -60 and 60")]
        public int TemperatureC { get; set; }

        [Required(ErrorMessage = "Summary is required")]
        public string? Summary { get; set; }
        
        public string? Error { get; set; }
    }

    public class EditLocationModel
    {
        public Guid ForecastId { get; set; }
        
        [Required(ErrorMessage = "New location is required")]
        public string? NewLocationName { get; set; }
        
        public string? Error { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadForecasts();
    }

    private async Task LoadForecasts(string? waitForSortableUniqueId = null)
    {
        try
        {
            var result = await WeatherApiClient.GetWeatherAsync(
                pageNumber: currentPage,
                pageSize: pageSize,
                waitForSortableUniqueId: waitForSortableUniqueId);
            
            forecasts = result?.ToList() ?? new List<WeatherForecastItem>();
            
            // For now, estimate total pages based on if we got a full page
            // In a real implementation, the API should return total count
            if (forecasts.Count < pageSize && currentPage == 1)
            {
                totalPages = 1;
                totalItems = forecasts.Count;
            }
            else if (forecasts.Count == pageSize)
            {
                // Assume there might be more pages
                totalPages = Math.Max(totalPages, currentPage + 1);
                totalItems = forecasts.Count * currentPage;
            }
            else
            {
                totalPages = currentPage;
                totalItems = (currentPage - 1) * pageSize + forecasts.Count;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading forecasts");
            forecasts = new List<WeatherForecastItem>();
            totalPages = 1;
            totalItems = 0;
        }
    }

    private async Task HandleRemoveForecast(Guid forecastId)
    {
        try
        {
            var response = await WeatherApiClient.RemoveWeatherAsync(forecastId);
            
            if (response?.SortableUniqueId != null)
            {
                lastSortableUniqueId = response.SortableUniqueId;
                await LoadForecasts(lastSortableUniqueId);
            }
            else
            {
                await LoadForecasts();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting forecast");
        }
    }
    
    private async Task ChangePage(int newPage)
    {
        if (newPage < 1 || (newPage > totalPages && totalPages > 0))
            return;
            
        currentPage = newPage;
        await LoadForecasts(lastSortableUniqueId);
    }
    
    private async Task OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var newSize))
        {
            pageSize = newSize;
            currentPage = 1; // Reset to first page when changing page size
            await LoadForecasts(lastSortableUniqueId);
        }
    }

    private async Task CloseAddModal()
    {
        forecastModel = new();
        await JsRuntime.InvokeVoidAsync("eval", 
            "bootstrap.Modal.getInstance(document.getElementById('addForecastModal'))?.hide()");
    }

    private async Task CloseEditLocationModal()
    {
        editLocationModel = new();
        await JsRuntime.InvokeVoidAsync("eval", 
            "bootstrap.Modal.getInstance(document.getElementById('editLocationModal'))?.hide()");
    }

    private async Task OpenAddForecastModal()
    {
        forecastModel = new() { Date = DateTime.Today };
        await JsRuntime.InvokeVoidAsync("eval", 
            "new bootstrap.Modal(document.getElementById('addForecastModal')).show()");
    }

    private async Task OpenEditLocationModal(WeatherForecastItem forecast)
    {
        editLocationModel = new EditLocationModel
        {
            ForecastId = forecast.ForecastId,
            NewLocationName = forecast.Location
        };
        await JsRuntime.InvokeVoidAsync("eval", 
            "new bootstrap.Modal(document.getElementById('editLocationModal')).show()");
    }

    private async Task HandleEditLocationSubmit()
    {
        try
        {
            var response = await WeatherApiClient.UpdateLocationAsync(
                editLocationModel.ForecastId,
                editLocationModel.NewLocationName!);
            
            if (response?.SortableUniqueId != null)
            {
                lastSortableUniqueId = response.SortableUniqueId;
                // Stay on current page after edit
                await LoadForecasts(lastSortableUniqueId);
                await CloseEditLocationModal();
            }
            else
            {
                editLocationModel.Error = "Failed to update location. Please try again.";
            }
        }
        catch (Exception ex)
        {
            editLocationModel.Error = $"Failed to update location: {ex.Message}";
        }
    }

    private async Task HandleAddForecastSubmit()
    {
        try
        {
            var command = new CreateWeatherForecast
            {
                ForecastId = Guid.NewGuid(),
                Location = forecastModel.Location!,
                Date = DateOnly.FromDateTime(forecastModel.Date!.Value),
                TemperatureC = forecastModel.TemperatureC,
                Summary = forecastModel.Summary
            };
                
            var response = await WeatherApiClient.InputWeatherAsync(command);
            
            if (response?.SortableUniqueId != null)
            {
                lastSortableUniqueId = response.SortableUniqueId;
                currentPage = 1; // Go to first page to see the new item
                await LoadForecasts(lastSortableUniqueId);
                await CloseAddModal();
            }
            else
            {
                forecastModel.Error = "Failed to add weather forecast. Please try again.";
            }
        }
        catch (Exception ex)
        {
            forecastModel.Error = $"Failed to add weather forecast: {ex.Message}";
        }
    }
}