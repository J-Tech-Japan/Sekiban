@page "/students"
@attribute [StreamRendering]
@rendermode InteractiveServer

@using Dcb.Domain.Student
@using System.Net.Http
@using System.Net.Http.Json

@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JsRuntime
@inject ILogger<Students> Logger

<PageTitle>Students</PageTitle>

<h1>Student Management</h1>

<div>
    <button class="btn btn-primary mb-3" @onclick="OpenAddStudentModal">Add New Student</button>
</div>

@if (students == null)
{
    <p><em>Loading...</em></p>
}
else if (students.Count == 0)
{
    <p>No students registered. Click "Add New Student" to create one.</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Student Name</th>
            <th>Grade</th>
            <th>Student ID</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
            @foreach (var student in students)
            {
                <tr>
                    <td>@student.StudentName</td>
                    <td>@student.Grade</td>
                    <td>@student.StudentId</td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="() => HandleDeleteStudent(student.StudentId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
    
<!-- Add Student Modal -->
<div class="modal fade" id="addStudentModal" data-bs-backdrop="static" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Student</h5>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="studentName" class="form-label">Student Name</label>
                    <input id="studentName" class="form-control" @bind="studentModel.StudentName" />
                </div>
                <div class="mb-3">
                    <label for="grade" class="form-label">Grade</label>
                    <input type="number" id="grade" class="form-control" @bind="studentModel.Grade" min="1" max="12" />
                </div>
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @errorMessage
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="HandleAddStudentSubmit">Add Student</button>
            </div>
        </div>
    </div>
</div>


@code {
    private List<StudentView>? students;
    private StudentModel studentModel = new();
    private string errorMessage = string.Empty;

    public class StudentView
    {
        public Guid StudentId { get; set; }
        public string StudentName { get; set; } = string.Empty;
        public int Grade { get; set; }
    }

    public class StudentModel
    {
        public string StudentName { get; set; } = string.Empty;
        public int Grade { get; set; } = 1;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadStudents();
    }

    private async Task LoadStudents()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiService");
            var response = await httpClient.GetFromJsonAsync<List<StudentView>>("api/students");
            students = response ?? new List<StudentView>();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading students");
            students = new List<StudentView>();
        }
    }

    private async Task HandleDeleteStudent(Guid studentId)
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiService");
            var response = await httpClient.DeleteAsync($"api/students/{studentId}");
            
            if (response.IsSuccessStatusCode)
            {
                await LoadStudents();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting student");
        }
    }

    private async Task CloseModal()
    {
        studentModel = new();
        errorMessage = string.Empty;
        await JsRuntime.InvokeVoidAsync("eval", "$('#addStudentModal').modal('hide')");
    }

    private async Task OpenAddStudentModal()
    {
        studentModel = new();
        errorMessage = string.Empty;
        await JsRuntime.InvokeVoidAsync("eval", "$('#addStudentModal').modal('show')");
    }

    private async Task HandleAddStudentSubmit()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiService");
            var command = new CreateStudent(
                Guid.NewGuid(),
                studentModel.StudentName,
                studentModel.Grade);
                
            var response = await httpClient.PostAsJsonAsync("api/students", command);
            
            if (response.IsSuccessStatusCode)
            {
                await LoadStudents();
                await CloseModal();
            }
            else
            {
                errorMessage = "Failed to add student. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to add student: {ex.Message}";
        }
    }
}