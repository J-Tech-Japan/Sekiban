@page "/users"
@using AspireAndSekibanSample.Domain.Aggregates.AccountUsers
@using Sekiban.Core.Aggregate
@using Sekiban.Core.Query
@using Sekiban.Core.Query.QueryModel
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject WeatherApiClient WeatherApi

<PageTitle>Users</PageTitle>

<h1>Users</h1>

<p>This component demonstrates showing data loaded from a backend API service.</p>

@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>AggregateId</th>
                <th>Name</th>
                <th>Email</th>
                <th>Version</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in users.Items)
            {
                <tr>
                    <td>@forecast.AggregateState.AggregateId</td>
                    <td>@forecast.AggregateState.Payload.Name</td>
                    <td>@forecast.AggregateState.Payload.Email</td>
                    <td>@forecast.AggregateState.Version</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private ListQueryResult<QueryAggregateState<AccountUser>>? users;

    protected override async Task OnInitializedAsync()
    {
        users = await WeatherApi.GetAccountUserAsync();
    }
}
