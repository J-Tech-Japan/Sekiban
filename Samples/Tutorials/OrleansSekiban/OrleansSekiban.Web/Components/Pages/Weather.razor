@page "/weather"
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@using OrleansSekiban.Domain
@using System.ComponentModel.DataAnnotations

@inject WeatherApiClient WeatherApi
@inject IJSRuntime JsRuntime

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<div>
    <button class="btn btn-primary mb-3" @onclick="OpenAddForecastModal">Add New Weather Forecast</button>
</div>

<h3>Weather Forecasts</h3>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th aria-label="Temperature in Celsius">Temp. (C)</th>
                <th aria-label="Temperature in Farenheit">Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.GetTemperatureF()</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

<div class="modal fade" id="addForecastModal" data-bs-backdrop="static" tabindex="-1" aria-labelledby="addForecastModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <EditForm FormName="weather-forecast" Model="@forecastModel" OnValidSubmit="HandleAddForecastSubmit">
                <div class="modal-header">
                    <h5 class="modal-title" id="addForecastModalLabel">Add Weather Forecast</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label for="location" class="form-label">Location</label>
                        <InputText id="location" class="form-control" @bind-Value="forecastModel.Location" />
                        <ValidationMessage For="@(() => forecastModel.Location)" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="date" class="form-label">Date</label>
                        <InputDate id="date" class="form-control" @bind-Value="forecastModel.Date" />
                        <ValidationMessage For="@(() => forecastModel.Date)" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="temperatureC" class="form-label">Temperature (°C)</label>
                        <InputNumber id="temperatureC" class="form-control" @bind-Value="forecastModel.TemperatureC" />
                    </div>
                    <div class="mb-3">
                        <label for="summary" class="form-label">Summary</label>
                        <InputSelect id="summary" class="form-select" @bind-Value="forecastModel.Summary">
                            <option value="">Select a summary...</option>
                            @foreach (var summary in summaries)
                            {
                                <option value="@summary">@summary</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => forecastModel.Summary)" class="text-danger" />
                    </div>
                    @if (!string.IsNullOrEmpty(forecastModel.Error))
                    {
                        <div class="alert alert-danger" role="alert">
                            @forecastModel.Error
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Add Forecast</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<script>
    function DisplayAddModal(param) {
        $('#addForecastModal').modal(param);
    }
</script>

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
        }
    }
    private WeatherForecastModel forecastModel = new();
    private string[] summaries = ["Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"];

    private class WeatherForecastModel
    {
        [Required(ErrorMessage = "Location is required")]
        public string? Location { get; set; }

        [Required(ErrorMessage = "Date is required")]
        public DateTime? Date { get; set; }

        public int TemperatureC { get; set; }

        [Required(ErrorMessage = "Summary is required")]
        public string? Summary { get; set; }
        public string? Error { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        forecasts = await WeatherApi.GetWeatherAsync();
    }

    private async Task CloseModal()
    {
        forecastModel = new();
        await JsRuntime.InvokeVoidAsync("DisplayAddModal", "hide");
    }

    private async Task OpenAddForecastModal()
    {
        forecastModel = new();
        await JsRuntime.InvokeVoidAsync("DisplayAddModal", "show");
    }

    private async Task HandleAddForecastSubmit()
    {
        try
        {
            var command = new InputWeatherForecastCommand(
                forecastModel.Location!,
                DateOnly.FromDateTime(forecastModel.Date!.Value),
                forecastModel.TemperatureC,
                forecastModel.Summary!);

            await WeatherApi.InputWeatherAsync(command);
            forecasts = await WeatherApi.GetWeatherAsync();
            
            // Reset form and close modal
            forecastModel = new WeatherForecastModel();
            await JsRuntime.InvokeVoidAsync("$", "#addForecastModal", "modal", "hide");
        }
        catch (Exception ex)
        {
            forecastModel.Error = "Failed to add weather forecast. Please try again.";
        }
    }
}
