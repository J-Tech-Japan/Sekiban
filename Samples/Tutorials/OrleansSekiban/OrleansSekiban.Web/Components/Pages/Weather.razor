﻿@page "/weather"
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@using OrleansSekiban.Domain
@using System.ComponentModel.DataAnnotations

@inject WeatherApiClient WeatherApi

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<div class="mb-4">
    <h3>Add New Weather Forecast</h3>
    <div class="row">
        <div class="col-md-4">
            <EditForm FormName="weather-forecast" Model="@forecastModel" OnValidSubmit="SubmitForecast">
                <DataAnnotationsValidator />
                <ValidationSummary />
                
                <div class="mb-3">
                    <label for="location" class="form-label">Location</label>
                    <InputText id="location" class="form-control" @bind-Value="forecastModel.Location" />
                </div>
                <div class="mb-3">
                    <label for="date" class="form-label">Date</label>
                    <InputDate id="date" class="form-control" @bind-Value="forecastModel.Date" />
                </div>
                <div class="mb-3">
                    <label for="temperatureC" class="form-label">Temperature (°C)</label>
                    <InputNumber id="temperatureC" class="form-control" @bind-Value="forecastModel.TemperatureC" />
                </div>
                <div class="mb-3">
                    <label for="summary" class="form-label">Summary</label>
                    <InputSelect id="summary" class="form-select" @bind-Value="forecastModel.Summary">
                        <option value="">Select a summary...</option>
                        @foreach (var summary in summaries)
                        {
                            <option value="@summary">@summary</option>
                        }
                    </InputSelect>
                </div>
                <button type="submit" class="btn btn-primary">Add Forecast</button>
            </EditForm>
        </div>
    </div>
</div>

<h3>Weather Forecasts</h3>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th aria-label="Temperature in Celsius">Temp. (C)</th>
                <th aria-label="Temperature in Farenheit">Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.GetTemperatureF()</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private WeatherForecastModel forecastModel = new();
    private string[] summaries = ["Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"];

    private class WeatherForecastModel
    {
        [Required(ErrorMessage = "Location is required")]
        public string? Location { get; set; }

        [Required(ErrorMessage = "Date is required")]
        public DateTime? Date { get; set; }

        public int TemperatureC { get; set; }

        [Required(ErrorMessage = "Summary is required")]
        public string? Summary { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        forecasts = await WeatherApi.GetWeatherAsync();
    }

    private async Task SubmitForecast()
    {
        var command = new InputWeatherForecastCommand(
            forecastModel.Location!,
            DateOnly.FromDateTime(forecastModel.Date!.Value),
            forecastModel.TemperatureC,
            forecastModel.Summary!);

        await WeatherApi.InputWeatherAsync(command);
        forecasts = await WeatherApi.GetWeatherAsync();
        
        // Reset form
        forecastModel = new WeatherForecastModel();
    }
}
