@page "/weather"
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@using OrleansSekiban.Domain

@inject WeatherApiClient WeatherApi

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<div class="mb-4">
    <h3>Add New Weather Forecast</h3>
    <div class="row">
        <div class="col-md-4">
            <div class="mb-3">
                <label for="location" class="form-label">Location</label>
                <input type="text" class="form-control" id="location" @bind="newLocation" @bind:event="oninput" />
            </div>
            <div class="mb-3">
                <label for="date" class="form-label">Date</label>
                <input type="date" class="form-control" id="date" @bind="newDate" @bind:event="oninput" />
            </div>
            <div class="mb-3">
                <label for="temperatureC" class="form-label">Temperature (°C)</label>
                <input type="number" class="form-control" id="temperatureC" @bind="newTemperatureC" @bind:event="oninput" />
            </div>
            <div class="mb-3">
                <label for="summary" class="form-label">Summary</label>
                <select class="form-select" id="summary" @bind="newSummary" @bind:event="oninput">
                    <option value="">Select a summary...</option>
                    @foreach (var summary in summaries)
                    {
                        <option value="@summary">@summary</option>
                    }
                </select>
            </div>
            <button class="btn btn-primary" @onclick="SubmitForecast" disabled="@(!CanSubmit)">Add Forecast</button>
        </div>
    </div>
</div>

<h3>Weather Forecasts</h3>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th aria-label="Temperature in Celsius">Temp. (C)</th>
                <th aria-label="Temperature in Farenheit">Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.GetTemperatureF()</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private string? newLocation;
    private DateTime? newDate;
    private int newTemperatureC;
    private string? newSummary;
    private string[] summaries = ["Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"];

    private bool CanSubmit => !string.IsNullOrEmpty(newLocation) && 
                            newDate.HasValue && 
                            !string.IsNullOrEmpty(newSummary);

    protected override async Task OnInitializedAsync()
    {
        forecasts = await WeatherApi.GetWeatherAsync();
    }

    private async Task SubmitForecast()
    {
        if (!CanSubmit) return;

        var command = new InputWeatherForecastCommand(
            newLocation!,
            DateOnly.FromDateTime(newDate!.Value),
            newTemperatureC,
            newSummary!);

        await WeatherApi.InputWeatherAsync(command);
        forecasts = await WeatherApi.GetWeatherAsync();
        
        // Reset form
        newLocation = null;
        newDate = null;
        newTemperatureC = 0;
        newSummary = null;
    }
}
