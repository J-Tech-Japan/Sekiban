using System.Text.Json.Serialization;

namespace Sekiban.Pure.Dapr.Actors;

/// <summary>
/// Envelope for passing commands between SekibanDaprExecutor and AggregateActor
/// Contains Protobuf-serialized command payload that can be JSON-serialized by Dapr
/// </summary>
public record CommandEnvelope
{
    /// <summary>
    /// The fully qualified type name of the command
    /// </summary>
    [JsonPropertyName("commandType")]
    public string CommandType { get; init; } = string.Empty;

    /// <summary>
    /// Protobuf-serialized command payload
    /// </summary>
    [JsonPropertyName("commandPayload")]
    public byte[] CommandPayload { get; init; } = Array.Empty<byte>();

    /// <summary>
    /// The aggregate ID this command is targeting
    /// </summary>
    [JsonPropertyName("aggregateId")]
    public string AggregateId { get; init; } = string.Empty;

    /// <summary>
    /// Partition ID for distributed scenarios
    /// </summary>
    [JsonPropertyName("partitionId")]
    public Guid PartitionId { get; init; } = Guid.Empty;

    /// <summary>
    /// Root partition key for multi-tenancy
    /// </summary>
    [JsonPropertyName("rootPartitionKey")]
    public string RootPartitionKey { get; init; } = string.Empty;

    /// <summary>
    /// Command metadata (user, timestamp, etc.)
    /// </summary>
    [JsonPropertyName("metadata")]
    public Dictionary<string, string> Metadata { get; init; } = new();

    /// <summary>
    /// Correlation ID for tracking
    /// </summary>
    [JsonPropertyName("correlationId")]
    public string CorrelationId { get; init; } = string.Empty;

    /// <summary>
    /// Creates a new CommandEnvelope
    /// </summary>
    public CommandEnvelope() { }

    /// <summary>
    /// Creates a new CommandEnvelope with all properties
    /// </summary>
    public CommandEnvelope(
        string commandType,
        byte[] commandPayload,
        string aggregateId,
        Guid partitionId,
        string rootPartitionKey,
        Dictionary<string, string>? metadata = null,
        string? correlationId = null)
    {
        CommandType = commandType;
        CommandPayload = commandPayload;
        AggregateId = aggregateId;
        PartitionId = partitionId;
        RootPartitionKey = rootPartitionKey;
        Metadata = metadata ?? new Dictionary<string, string>();
        CorrelationId = correlationId ?? Guid.NewGuid().ToString();
    }
}

/// <summary>
/// Response from command execution
/// </summary>
public record CommandResponse
{
    /// <summary>
    /// Whether the command execution was successful
    /// </summary>
    [JsonPropertyName("isSuccess")]
    public bool IsSuccess { get; init; }

    /// <summary>
    /// List of events generated by the command (Protobuf-serialized)
    /// </summary>
    [JsonPropertyName("eventPayloads")]
    public List<byte[]> EventPayloads { get; init; } = new();

    /// <summary>
    /// Event types corresponding to EventPayloads
    /// </summary>
    [JsonPropertyName("eventTypes")]
    public List<string> EventTypes { get; init; } = new();

    /// <summary>
    /// Error details if command failed (JSON-serialized)
    /// </summary>
    [JsonPropertyName("errorJson")]
    public string? ErrorJson { get; init; }

    /// <summary>
    /// The new version of the aggregate after command execution
    /// </summary>
    [JsonPropertyName("aggregateVersion")]
    public int AggregateVersion { get; init; }

    /// <summary>
    /// The aggregate state after command execution (optional, Protobuf-serialized)
    /// </summary>
    [JsonPropertyName("aggregateStatePayload")]
    public byte[]? AggregateStatePayload { get; init; }

    /// <summary>
    /// The aggregate state type
    /// </summary>
    [JsonPropertyName("aggregateStateType")]
    public string? AggregateStateType { get; init; }

    /// <summary>
    /// Response metadata
    /// </summary>
    [JsonPropertyName("metadata")]
    public Dictionary<string, string> Metadata { get; init; } = new();

    /// <summary>
    /// Creates a new CommandResponse
    /// </summary>
    public CommandResponse() { }

    /// <summary>
    /// Creates a successful CommandResponse
    /// </summary>
    public static CommandResponse Success(
        List<byte[]> eventPayloads,
        List<string> eventTypes,
        int aggregateVersion,
        byte[]? aggregateStatePayload = null,
        string? aggregateStateType = null,
        Dictionary<string, string>? metadata = null)
    {
        return new CommandResponse
        {
            IsSuccess = true,
            EventPayloads = eventPayloads,
            EventTypes = eventTypes,
            AggregateVersion = aggregateVersion,
            AggregateStatePayload = aggregateStatePayload,
            AggregateStateType = aggregateStateType,
            Metadata = metadata ?? new Dictionary<string, string>()
        };
    }

    /// <summary>
    /// Creates a failed CommandResponse
    /// </summary>
    public static CommandResponse Failure(
        string errorJson,
        Dictionary<string, string>? metadata = null)
    {
        return new CommandResponse
        {
            IsSuccess = false,
            ErrorJson = errorJson,
            Metadata = metadata ?? new Dictionary<string, string>()
        };
    }
}