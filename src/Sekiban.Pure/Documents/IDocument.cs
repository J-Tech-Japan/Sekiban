namespace Sekiban.Pure.Documents;

/// <summary>
///     Basic Document Structure to Persist Events, Commands and Snapshots
/// </summary>
public interface IDocument
{
    /// <summary>
    ///     Default Root Partition Key - when app uses single root partition,
    ///     it should use this.
    /// </summary>
    public const string DefaultRootPartitionKey = "default";
    /// <summary>
    ///     Document Id, should be unique in all documents
    /// </summary>
    public Guid Id { get; init; }
    /// <summary>
    ///     Partition Key : Events Commands Snapshots each has own rule for partition key
    /// </summary>
    public string PartitionKey { get; init; }
    /// <summary>
    ///     Document Type : integer enum <see cref="DocumentType" />
    /// </summary>
    public DocumentType DocumentType { get; init; }
    /// <summary>
    ///     Document Type Name : Putting Event Payload Class Name, Command Payload Class Name etc.
    /// </summary>
    public string DocumentTypeName { get; init; }
    /// <summary>
    ///     Document Created Datetime (UTC)
    /// </summary>
    public DateTime TimeStamp { get; init; }
    /// <summary>
    ///     SortableUniqueId : used for the sorting of event store and also aggregate events.
    ///     Generated by the each backend.
    /// </summary>
    public string SortableUniqueId { get; init; }
    /// <summary>
    ///     Aggregate Type : Kind of the Aggregate.
    /// </summary>
    public string AggregateType { get; init; }
    /// <summary>
    ///     Root Partition Key : Used for making bigger partition
    ///     For example, can be used for tenant partition
    /// </summary>
    public string RootPartitionKey { get; init; }

    /// <summary>
    ///     Get SortableUniqueIdValue Value object from Sortable Unique Id string
    /// </summary>
    /// <returns></returns>
    public SortableUniqueIdValue GetSortableUniqueId();
}
