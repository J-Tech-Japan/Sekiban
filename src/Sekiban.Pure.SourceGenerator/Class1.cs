using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Immutable;
using System.Text;

namespace Sekiban.Pure.SourceGenerator;

public class Class1
{

}
[Generator]
public class EventTypeListerGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // 対象の型をフィルタリングするために、すべてのクラス宣言を集める
        var classDeclarations = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: static (node, _) => node is ClassDeclarationSyntax,
                transform: static (ctx, _) => (ClassDeclarationSyntax)ctx.Node
            )
            .Where(static classDecl => classDecl != null);

        // コンパイル情報と結合する
        var compilationAndClasses = context.CompilationProvider.Combine(classDeclarations.Collect());

        // ソースコードを生成
        context.RegisterSourceOutput(compilationAndClasses, (ctx, source) =>
        {
            var (compilation, classes) = source;
            var iEventSymbol = compilation.GetTypeByMetadataName("Sekiban.Pure.IEvent");

            if (iEventSymbol == null)
                return;

            var eventTypes = ImmutableArray.CreateBuilder<string>();

            foreach (var classSyntax in classes)
            {
                var model = compilation.GetSemanticModel(classSyntax.SyntaxTree);
                var typeSymbol = model.GetDeclaredSymbol(classSyntax) as INamedTypeSymbol; // INamedTypeSymbolにキャスト
                if (typeSymbol != null && typeSymbol.AllInterfaces.Contains(iEventSymbol, SymbolEqualityComparer.Default))
                {
                    eventTypes.Add(typeSymbol.ToDisplayString());
                }
            }

            // ソースコードを生成
            var sourceCode = GenerateSourceCode(eventTypes.ToImmutable());
            ctx.AddSource("EventTypes.g.cs", SourceText.From(sourceCode, Encoding.UTF8));
        });
    }

    private string GenerateSourceCode(ImmutableArray<string> eventTypes)
    {
        var sb = new StringBuilder();
        sb.AppendLine("// Auto-generated by IncrementalGenerator");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine("using System.Text.Json.Serialization;");
        sb.AppendLine();
        sb.AppendLine("namespace GeneratedNamespace");
        sb.AppendLine("{");
        
        
        
        foreach (var type in eventTypes)
        {
            sb.AppendLine($"          [JsonSerializable(typeof({type}))]");
        }
        sb.AppendLine("    public static class EventTypeList");
        sb.AppendLine("    {");
        sb.AppendLine("        public static IReadOnlyList<string> Types { get; } = new List<string>");
        sb.AppendLine("        {");

        foreach (var type in eventTypes)
        {
            sb.AppendLine($"            \"{type}\",");
        }

        sb.AppendLine("        };");
        sb.AppendLine("    }");
        sb.AppendLine("}");

        return sb.ToString();
    }
}