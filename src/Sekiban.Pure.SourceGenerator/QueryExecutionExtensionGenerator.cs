using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
namespace Sekiban.Pure.SourceGenerator;

[Generator]
public class QueryExecutionExtensionGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // Collect all class and record declarations
        var typeDeclarations = context
            .SyntaxProvider
            .CreateSyntaxProvider(
                static (node, _) => node is ClassDeclarationSyntax || node is RecordDeclarationSyntax,
                static (ctx, _) => ctx.Node)
            .Where(static typeDecl => typeDecl is ClassDeclarationSyntax || typeDecl is RecordDeclarationSyntax);

        // Combine with compilation information
        var compilationAndTypes = context.CompilationProvider.Combine(typeDeclarations.Collect());


        // Generate source code
        context.RegisterSourceOutput(
            compilationAndTypes,
            (ctx, source) =>
            {
                var (compilation, types) = source;
                var commandTypes = ImmutableArray.CreateBuilder<QueryWithHandlerValues>();

                commandTypes.AddRange(GetCommandWithHandlerValues(compilation, types));

                // Generate source code
                var rootNamespace = compilation.AssemblyName ?? throw new Exception();
                var queryTypesSourceCode = GenerateQueryTypesSourceCode(commandTypes.ToImmutable(), rootNamespace);
                var extensionsSourceCode = GenerateSourceCode(commandTypes.ToImmutable(), rootNamespace);

                ctx.AddSource("QueryTypes.g.cs", SourceText.From(queryTypesSourceCode, Encoding.UTF8));
                ctx.AddSource("QueryExecutorExtension.g.cs", SourceText.From(extensionsSourceCode, Encoding.UTF8));
            });
    }

    private string GenerateQueryTypesSourceCode(ImmutableArray<QueryWithHandlerValues> queryTypes, string rootNamespace)
    {
        var sb = new StringBuilder();
        sb.AppendLine("// Auto-generated by IncrementalGenerator");
        sb.AppendLine("using System.Threading.Tasks;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine("using ResultBoxes;");
        sb.AppendLine("using Sekiban.Pure.Query;");
        sb.AppendLine("using Sekiban.Pure.Projectors;");
        sb.AppendLine("using Sekiban.Pure.Exceptions;");

        sb.AppendLine();
        sb.AppendLine($"namespace {rootNamespace}.Generated");
        sb.AppendLine("{");
        sb.AppendLine($"    public class {rootNamespace.Replace(".", "")}QueryTypes : IQueryTypes");
        sb.AppendLine("    {");
        sb.AppendLine("        public IEnumerable<Type> GetQueryTypes()");
        sb.AppendLine("            => new List<Type>");
        sb.AppendLine("            {");
        foreach (var type in queryTypes)
        {
            sb.AppendLine($"                typeof({type.RecordName}),");
        }
        sb.AppendLine("            };");
        sb.AppendLine();

        sb.AppendLine("        public IEnumerable<Type> GetQueryResponseTypes()");
        sb.AppendLine("            => new List<Type>");
        sb.AppendLine("            {");
        foreach (var type in queryTypes.Where(t => !string.IsNullOrEmpty(t.Generic3Name)))
        {
            sb.AppendLine($"                typeof({type.Generic3Name}),");
        }
        sb.AppendLine("            };");
        sb.AppendLine();

        // Implement ExecuteAsQueryResult for IQueryCommon
        sb.AppendLine("        public Task<ResultBox<IQueryResult>> ExecuteAsQueryResult(");
        sb.AppendLine("            IQueryCommon query,");
        sb.AppendLine(
            "            Func<IMultiProjectionEventSelector, Task<ResultBox<IMultiProjectorStateCommon>>> repositoryLoader, IServiceProvider serviceProvider)");
        sb.AppendLine("        => (query, repositoryLoader) switch");
        sb.AppendLine("        {");

        foreach (var type in queryTypes.Where(t => t.InterfaceName == "IMultiProjectionQuery"))
        {
            sb.AppendLine(
                $"            ({type.RecordName} q, Func<IMultiProjectionEventSelector, Task<ResultBox<IMultiProjectorStateCommon>>> loader) =>");
            sb.AppendLine(
                "                new QueryExecutor(serviceProvider).ExecuteAsQueryResult(q, selector => loader(selector)");
            sb.AppendLine($"                        .Conveyor(MultiProjectionState<{type.Generic1Name}>.FromCommon)),");
        }

        sb.AppendLine("            _ => Task.FromResult(ResultBox<IQueryResult>.FromException(");
        sb.AppendLine(
            "                new SekibanQueryTypeException($\"Unknown query type {query.GetType().Name}\")))");
        sb.AppendLine("        };");

        sb.AppendLine();

        // Implement ExecuteAsQueryResult for IListQueryCommon
        sb.AppendLine("        public Task<ResultBox<IListQueryResult>> ExecuteAsQueryResult(");
        sb.AppendLine("            IListQueryCommon query,");
        sb.AppendLine(
            "            Func<IMultiProjectionEventSelector, Task<ResultBox<IMultiProjectorStateCommon>>> repositoryLoader, IServiceProvider serviceProvider)");
        sb.AppendLine("        => (query, repositoryLoader) switch");
        sb.AppendLine("        {");

        foreach (var type in queryTypes.Where(t => t.InterfaceName == "IMultiProjectionListQuery"))
        {
            sb.AppendLine(
                $"            ({type.RecordName} q, Func<IMultiProjectionEventSelector, Task<ResultBox<IMultiProjectorStateCommon>>> loader) =>");
            sb.AppendLine(
                "                new QueryExecutor(serviceProvider).ExecuteAsQueryResult(q, selector => loader(selector)");
            sb.AppendLine($"                        .Conveyor(MultiProjectionState<{type.Generic1Name}>.FromCommon)),");
        }

        sb.AppendLine("            _ => Task.FromResult(ResultBox<IListQueryResult>.FromException(");
        sb.AppendLine(
            "                new SekibanQueryTypeException($\"Unknown query type {query.GetType().Name} \")))");
        sb.AppendLine("        };");

        // Add ToTypedQueryResult method
        sb.AppendLine();
        sb.AppendLine("        public ResultBox<IQueryResult> ToTypedQueryResult(QueryResultGeneral general)");
        sb.AppendLine("            => general.Query switch");
        sb.AppendLine("            {");
        foreach (var type in queryTypes.Where(t => t.InterfaceName == "IMultiProjectionQuery"))
            sb.AppendLine(
                $"                {type.RecordName} => new QueryResult<{type.Generic3Name}>(({type.Generic3Name})general.Value),");
        sb.AppendLine(
            "                _ => throw new SekibanQueryTypeException($\"Unknown query type {general.Query.GetType().Name}\")");
        sb.AppendLine("            };");

        // Add ToTypedListQueryResult method
        sb.AppendLine();
        sb.AppendLine(
            "        public ResultBox<IListQueryResult> ToTypedListQueryResult(ListQueryResultGeneral general)");
        sb.AppendLine("            => general.Query switch");
        sb.AppendLine("            {");
        foreach (var type in queryTypes.Where(t => t.InterfaceName == "IMultiProjectionListQuery"))
            sb.AppendLine(
                $"            {type.RecordName} => ListQueryResult<{type.Generic3Name}>.FromGeneral(general)\n                .ConveyorWrapTry(a => a as IListQueryResult),");
        sb.AppendLine(
            "                _ => throw new SekibanQueryTypeException($\"Unknown query type {general.Query.GetType().Name}\")");
        sb.AppendLine("            };");

        // Add GetMultiProjector for IQueryCommon
        sb.AppendLine();
        sb.AppendLine("        public ResultBox<IMultiProjectorCommon> GetMultiProjector(IQueryCommon query)");
        sb.AppendLine("            => query switch");
        sb.AppendLine("            {");
        foreach (var type in queryTypes.Where(t => t.InterfaceName == "IMultiProjectionQuery"))
            sb.AppendLine($"                {type.RecordName} => {type.Generic1Name}.GenerateInitialPayload(),");
        sb.AppendLine("                _ => ResultBox<IMultiProjectorCommon>.FromException(");
        sb.AppendLine(
            "                    new SekibanQueryTypeException($\"Unknown query type {query.GetType().Name}\"))");
        sb.AppendLine("            };");

        // Add GetMultiProjector for IListQueryCommon
        sb.AppendLine();
        sb.AppendLine("        public ResultBox<IMultiProjectorCommon> GetMultiProjector(IListQueryCommon query)");
        sb.AppendLine("            => query switch");
        sb.AppendLine("            {");
        foreach (var type in queryTypes.Where(t => t.InterfaceName == "IMultiProjectionListQuery"))
            sb.AppendLine($"                {type.RecordName} => {type.Generic1Name}.GenerateInitialPayload(),");
        sb.AppendLine("                _ => ResultBox<IMultiProjectorCommon>.FromException(");
        sb.AppendLine(
            "                    new SekibanQueryTypeException($\"Unknown query type {query.GetType().Name}\"))");
        sb.AppendLine("            };");

        sb.AppendLine("    }");
        sb.AppendLine("}");

        return sb.ToString();
    }

    public ImmutableArray<QueryWithHandlerValues> GetCommandWithHandlerValues(
        Compilation compilation,
        ImmutableArray<SyntaxNode> types)
    {
        var iListQueryWithHandlerSymbol
            = compilation.GetTypeByMetadataName("Sekiban.Pure.Query.IMultiProjectionListQuery`3");
        var iQueryWithHandlerSymbol = compilation.GetTypeByMetadataName("Sekiban.Pure.Query.IMultiProjectionQuery`3");
        if (iListQueryWithHandlerSymbol == null && iQueryWithHandlerSymbol == null)
            return new ImmutableArray<QueryWithHandlerValues>();
        var eventTypes = ImmutableArray.CreateBuilder<QueryWithHandlerValues>();
        foreach (var typeSyntax in types)
        {
            var model = compilation.GetSemanticModel(typeSyntax.SyntaxTree);
            var typeSymbol = model.GetDeclaredSymbol(typeSyntax) as INamedTypeSymbol ?? throw new Exception();
            var allInterfaces = typeSymbol.AllInterfaces.ToList();
            var matchingInterface = typeSymbol.AllInterfaces.FirstOrDefault(
                m => m.OriginalDefinition is not null &&
                    (m.OriginalDefinition.Name == iListQueryWithHandlerSymbol?.Name ||
                        m.OriginalDefinition.Name == iQueryWithHandlerSymbol?.Name));

            if (matchingInterface != null)
                eventTypes.Add(
                    new QueryWithHandlerValues
                    {
                        InterfaceName = matchingInterface.Name,
                        RecordName = typeSymbol.ToDisplayString(),
                        TypeCount = matchingInterface.TypeArguments.Length,
                        Generic1Name = matchingInterface.TypeArguments[0].ToDisplayString(),
                        Generic2Name = matchingInterface.TypeArguments[1].ToDisplayString(),
                        Generic3Name = matchingInterface.TypeArguments.Length > 2
                            ? matchingInterface.TypeArguments[2].ToDisplayString()
                            : string.Empty
                    });
        }

        return eventTypes.ToImmutable();
    }


    private string GenerateSourceCode(ImmutableArray<QueryWithHandlerValues> eventTypes, string rootNamespace)
    {
        var sb = new StringBuilder();
        sb.AppendLine("// Auto-generated by IncrementalGenerator");
        sb.AppendLine("using System.Threading.Tasks;");
        sb.AppendLine("using ResultBoxes;");
        sb.AppendLine("using Sekiban.Pure;");
        sb.AppendLine("using Sekiban.Pure.Projectors;");
        sb.AppendLine("using Sekiban.Pure.Exceptions;");
        sb.AppendLine("using Sekiban.Pure.Events;");
        sb.AppendLine("using Sekiban.Pure.Command.Handlers;");
        sb.AppendLine("using Sekiban.Pure.Command.Executor;");
        sb.AppendLine("using Sekiban.Pure.Aggregates;");
        sb.AppendLine("using Sekiban.Pure.Documents;");
        sb.AppendLine("using Sekiban.Pure.Query;");
        sb.AppendLine();
        sb.AppendLine($"namespace {rootNamespace}.Generated");
        sb.AppendLine("{");
        sb.AppendLine("    public static class QueryExecutorExtensions");
        sb.AppendLine("    {");

        foreach (var type in eventTypes)
        {
            switch (type.InterfaceName, type.TypeCount)
            {
                case ("IMultiProjectionListQuery", 3):
                    sb.AppendLine(
                        $"        public static Task<ResultBox<ListQueryResult<{type.Generic3Name}>>> Execute(this QueryExecutor queryExecutor, {type.RecordName} query, Func<IMultiProjectionEventSelector, Task<ResultBox<MultiProjectionState<{type.Generic1Name}>>>> repositoryLoader) =>");
                    sb.AppendLine(
                        $"      queryExecutor.ExecuteListWithMultiProjectionFunction<{type.Generic1Name},{type.Generic2Name},{type.Generic3Name}>(");
                    sb.AppendLine("                query,");
                    sb.AppendLine($"                {type.Generic2Name}.HandleFilter,");
                    sb.AppendLine($"                {type.Generic2Name}.HandleSort, repositoryLoader);");
                    sb.AppendLine();
                    break;
                case ("IMultiProjectionQuery", 3):
                    sb.AppendLine(
                        $"        public static Task<ResultBox<{type.Generic3Name}>> Execute(this QueryExecutor queryExecutor, {type.RecordName} query,  Func<IMultiProjectionEventSelector, Task<ResultBox<MultiProjectionState<{type.Generic1Name}>>>> repositoryLoader) =>");
                    sb.AppendLine(
                        $"      queryExecutor.ExecuteWithMultiProjectionFunction<{type.Generic1Name},{type.Generic2Name},{type.Generic3Name}>(");
                    sb.AppendLine("                query,");
                    sb.AppendLine($"                {type.Generic2Name}.HandleQuery, repositoryLoader);");
                    sb.AppendLine();
                    break;
            }

            // Add ExecuteAsQueryResult overload for single query
            if (type.InterfaceName == "IMultiProjectionQuery" && type.TypeCount == 3)
            {
                sb.AppendLine(
                    $"        public static Task<ResultBox<IQueryResult>> ExecuteAsQueryResult(this QueryExecutor queryExecutor, {type.RecordName} query,  Func<IMultiProjectionEventSelector, Task<ResultBox<MultiProjectionState<{type.Generic1Name}>>>> repositoryLoader) =>");
                sb.AppendLine(
                    $"            queryExecutor.ExecuteWithMultiProjectionFunction<{type.Generic1Name},{type.Generic2Name},{type.Generic3Name}>(");
                sb.AppendLine("                query,");
                sb.AppendLine(
                    $"                {type.Generic2Name}.HandleQuery, repositoryLoader).Remap(value => new QueryResult<{type.Generic3Name}>(value)).Remap(valueResult => (IQueryResult)valueResult);");
                sb.AppendLine();
            }

            // Add ExecuteAsQueryResult overload for list query
            if (type.InterfaceName == "IMultiProjectionListQuery" && type.TypeCount == 3)
            {
                sb.AppendLine(
                    $"        public static Task<ResultBox<IListQueryResult>> ExecuteAsQueryResult(this QueryExecutor queryExecutor, {type.RecordName} query,  Func<IMultiProjectionEventSelector, Task<ResultBox<MultiProjectionState<{type.Generic1Name}>>>> repositoryLoader) =>");
                sb.AppendLine(
                    $"            queryExecutor.ExecuteListWithMultiProjectionFunction<{type.Generic1Name},{type.Generic2Name},{type.Generic3Name}>(");
                sb.AppendLine("                query,");
                sb.AppendLine($"                {type.Generic2Name}.HandleFilter,");
                sb.AppendLine(
                    $"                {type.Generic2Name}.HandleSort, repositoryLoader).Remap(rs => (IListQueryResult)rs);");
                sb.AppendLine();
            }
        }

        sb.AppendLine("    }");
        sb.AppendLine("}");

        return sb.ToString();
    }

    public class QueryWithHandlerValues
    {
        public string InterfaceName { get; set; } = string.Empty;
        public string RecordName { get; set; } = string.Empty;
        public int TypeCount { get; set; }
        public string Generic1Name { get; set; } = string.Empty;
        public string Generic2Name { get; set; } = string.Empty;
        public string InjectTypeName { get; set; } = string.Empty;
        public string Generic3Name { get; set; } = string.Empty;
    }
}
