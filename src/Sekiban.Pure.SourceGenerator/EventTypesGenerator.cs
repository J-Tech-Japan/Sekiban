using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System.Collections.Immutable;
using System.Text;
namespace Sekiban.Pure.SourceGenerator;

[Generator]
public class EventTypesGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // Collect all class and record declarations
        var typeDeclarations = context
            .SyntaxProvider
            .CreateSyntaxProvider(
                static (node, _) => node is ClassDeclarationSyntax || node is RecordDeclarationSyntax,
                static (ctx, _) => ctx.Node)
            .Where(static typeDecl => typeDecl is ClassDeclarationSyntax || typeDecl is RecordDeclarationSyntax);

        // Combine with compilation information
        var compilationAndTypes = context.CompilationProvider.Combine(typeDeclarations.Collect());

        // Generate source code
        context.RegisterSourceOutput(
            compilationAndTypes,
            (ctx, source) =>
            {
                var (compilation, types) = source;
                var eventTypes = SekibanTypesExtractors.GetEventValues(compilation, types);
                var aggregateTypes = SekibanTypesExtractors.GetAggregateTypeValues(compilation, types);
                var multiProjectorTypes = SekibanTypesExtractors.GetMultiProjectorValues(compilation, types);
                var rootNamespace = compilation.AssemblyName ?? throw new ApplicationException("AssemblyName is null");
                var sourceCode = GenerateSourceCode(eventTypes, aggregateTypes,multiProjectorTypes, rootNamespace);
                ctx.AddSource("EventTypes.g.cs", SourceText.From(sourceCode, Encoding.UTF8));
            });
    }
    
    private string GenerateSourceCode(ImmutableArray<SekibanTypesExtractors.EventTypeValues> eventTypes, 
        ImmutableArray<SekibanTypesExtractors.AggregateTypesValues> aggregateTypes,
        ImmutableArray<SekibanTypesExtractors.MultiProjectorValue> multiProjectorValues,
        string rootNamespace)
    {
        var sb = new StringBuilder();
        sb.AppendLine("// Auto-generated by IncrementalGenerator");
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Threading.Tasks;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine("using ResultBoxes;");
        sb.AppendLine("using Sekiban.Pure;");
        sb.AppendLine("using Sekiban.Pure.Exceptions;");
        sb.AppendLine("using Sekiban.Pure.Events;");
        sb.AppendLine("using Sekiban.Pure.Documents;");
        sb.AppendLine("using Sekiban.Pure.Extensions;");
        sb.AppendLine("using Sekiban.Pure.Serialize;");
        sb.AppendLine("using System.Text.Json;");
        sb.AppendLine("using System.Text.Json.Serialization;");

        sb.AppendLine();
        sb.AppendLine($"namespace {rootNamespace}.Generated");
        sb.AppendLine("{");
        sb.AppendLine($"    public class {rootNamespace.Replace(".", "")}EventTypes : IEventTypes");
        sb.AppendLine("    {");
        sb.AppendLine("        public ResultBox<IEvent> GenerateTypedEvent(");
        sb.AppendLine("            IEventPayload payload,");
        sb.AppendLine("            PartitionKeys partitionKeys,");
        sb.AppendLine("            string sortableUniqueId,");
        sb.AppendLine("            int version,");
        sb.AppendLine("            EventMetadata metadata) => payload switch");
        sb.AppendLine("        {");

        foreach (var type in eventTypes)
        {
            switch (type.InterfaceName, type.TypeCount)
            {
                case ("IEventPayload", 0):
                    sb.AppendLine(
                        $"            {type.RecordName} {type.RecordName.Split('.').Last().ToLower()} => new Event<{type.RecordName}>(");
                    sb.AppendLine("                GuidExtensions.CreateVersion7(),");
                    sb.AppendLine($"                {type.RecordName.Split('.').Last().ToLower()},");
                    sb.AppendLine("                partitionKeys,");
                    sb.AppendLine("                sortableUniqueId,");
                    sb.AppendLine("                version,");
                    sb.AppendLine("                metadata),");
                    break;
            }
        }

        sb.AppendLine("            _ => ResultBox<IEvent>.FromException(");
        sb.AppendLine(
            "                new SekibanEventTypeNotFoundException($\"Event Type {payload.GetType().Name} Not Found\"))");
        sb.AppendLine("        };");
        sb.AppendLine();
        sb.AppendLine("        public ResultBox<IEventDocument> ConvertToEventDocument(");
        sb.AppendLine("            IEvent ev) => ev switch");
        sb.AppendLine("        {");

        foreach (var type in eventTypes)
        {
            switch (type.InterfaceName, type.TypeCount)
            {
                case ("IEventPayload", 0):
                    sb.AppendLine(
                        $"            Event<{type.RecordName}> {type.RecordName.Split('.').Last()}Event => EventDocument<{type.RecordName}>.FromEvent(");
                    sb.AppendLine($"                {type.RecordName.Split('.').Last()}Event),");
                    break;
            }
        }

        sb.AppendLine("            _ => ResultBox<IEventDocument>.FromException(");
        sb.AppendLine(
            "                new SekibanEventTypeNotFoundException($\"Event Type {ev.GetPayload().GetType().Name} Not Found\"))");
        sb.AppendLine("        };");

        sb.AppendLine("        public ResultBox<IEvent> DeserializeToTyped(");
        sb.AppendLine(
            "            EventDocumentCommon common, JsonSerializerOptions serializeOptions) => common.PayloadTypeName switch");
        sb.AppendLine("        {");

        foreach (var type in eventTypes)
        {
            switch (type.InterfaceName, type.TypeCount)
            {
                case ("IEventPayload", 0):
                    sb.AppendLine(
                        $"            nameof({type.RecordName}) => common.ToEvent<{type.RecordName}>(serializeOptions),");
                    break;
            }
        }

        sb.AppendLine("            _ => ResultBox<IEvent>.FromException(");
        sb.AppendLine(
            "                new SekibanEventTypeNotFoundException($\"Event Type {common.PayloadTypeName} Not Found\"))");
        sb.AppendLine("        };");

        sb.AppendLine();
        sb.AppendLine("        public void CheckEventJsonContextOption(JsonSerializerOptions options)");
        sb.AppendLine("        {");
        sb.AppendLine(
            "            if (options?.TypeInfoResolver?.GetTypeInfo(typeof(EventDocumentCommon), options) == null)");
        sb.AppendLine("            {");
        sb.AppendLine(
            "                throw new SekibanEventTypeNotFoundException($\"EventDocumentCommon not found in {options?.TypeInfoResolver?.GetType().Name ?? string.Empty}, put attribute [JsonSerializable(typeof(EventDocumentCommon))] \");");
        sb.AppendLine("            }");
        sb.AppendLine(
            "            if (options?.TypeInfoResolver?.GetTypeInfo(typeof(EventDocumentCommon[]), options) == null)");
        sb.AppendLine("            {");
        sb.AppendLine(
            "                throw new SekibanEventTypeNotFoundException($\"EventDocumentCommon[] not found in {options?.TypeInfoResolver?.GetType().Name ?? string.Empty}, put attribute [JsonSerializable(typeof(EventDocumentCommon[]))] \");");
        sb.AppendLine("            }");
        sb.AppendLine(
            "            if (options?.TypeInfoResolver?.GetTypeInfo(typeof(Sekiban.Pure.Aggregates.EmptyAggregatePayload), options) == null)");
        sb.AppendLine("            {");
        sb.AppendLine(
            "                throw new SekibanEventTypeNotFoundException($\"EmptyAggregatePayload not found in {options?.TypeInfoResolver?.GetType().Name ?? string.Empty}, put attribute [JsonSerializable(typeof(EmptyAggregatePayload))]\");");
        sb.AppendLine("            }");
        sb.AppendLine(
            "            if (options?.TypeInfoResolver?.GetTypeInfo(typeof(Sekiban.Pure.Projectors.IMultiProjectorCommon), options) == null)");
        sb.AppendLine("            {");
        sb.AppendLine(
            "                throw new SekibanEventTypeNotFoundException($\"IMultiProjectorCommon not found in {options?.TypeInfoResolver?.GetType().Name ?? string.Empty}, put attribute [JsonSerializable(typeof(IMultiProjectorCommon))]\");");
        sb.AppendLine("            }");
        sb.AppendLine(
            "            if (options?.TypeInfoResolver?.GetTypeInfo(typeof(Sekiban.Pure.Documents.PartitionKeys), options) == null)");
        sb.AppendLine("            {");
        sb.AppendLine(
            "                throw new SekibanEventTypeNotFoundException($\"PartitionKeys not found in {options?.TypeInfoResolver?.GetType().Name ?? string.Empty}, put attribute [JsonSerializable(typeof(PartitionKeys))]\");");
        sb.AppendLine("            }");
        sb.AppendLine(
            "            if (options?.TypeInfoResolver?.GetTypeInfo(typeof(Sekiban.Pure.Projectors.SerializableAggregateListProjector), options) == null)");
        sb.AppendLine("            {");
        sb.AppendLine(
            "                throw new SekibanEventTypeNotFoundException($\"SerializableAggregateListProjector not found in {options?.TypeInfoResolver?.GetType().Name ?? string.Empty}, put attribute [JsonSerializable(typeof(SerializableAggregateListProjector))]\");");
        sb.AppendLine("            }");
        sb.AppendLine(
            "            if (options?.TypeInfoResolver?.GetTypeInfo(typeof(Sekiban.Pure.Aggregates.SerializableAggregate), options) == null)");
        sb.AppendLine("            {");
        sb.AppendLine(
            "                throw new SekibanEventTypeNotFoundException($\"SerializableAggregate not found in {options?.TypeInfoResolver?.GetType().Name ?? string.Empty}, put attribute [JsonSerializable(typeof(SerializableAggregate))]\");");
        sb.AppendLine("            }");
        foreach (var type in eventTypes)
        {
            switch (type.InterfaceName, type.TypeCount)
            {
                case ("IEventPayload", 0):
                    sb.AppendLine(
                        $"            if (options?.TypeInfoResolver?.GetTypeInfo(typeof(EventDocument<{type.RecordName}>), options) == null)");
                    sb.AppendLine("            {");
                    sb.AppendLine(
                        $"                throw new SekibanEventTypeNotFoundException($\"EventDocument<{type.RecordName}> not found in {{options?.TypeInfoResolver?.GetType().Name ?? string.Empty}}, put attribute [JsonSerializable(typeof(EventDocument<{type.RecordName}>))]\");");
                    sb.AppendLine("            }");
                    sb.AppendLine(
                        $"            if (options?.TypeInfoResolver?.GetTypeInfo(typeof({type.RecordName}), options) == null)");
                    sb.AppendLine("            {");
                    sb.AppendLine(
                        $"                throw new SekibanEventTypeNotFoundException($\"{type.RecordName} not found in {{options?.TypeInfoResolver?.GetType().Name ?? string.Empty}}, put attribute [JsonSerializable(typeof(EventDocument<{type.RecordName}>))]\");");
                    sb.AppendLine("            }");
                    break;
            }
        }
        sb.AppendLine("        }");

        sb.AppendLine();
        sb.AppendLine(
            "        public ResultBox<string> SerializePayloadToJson(ISekibanSerializer serializer, IEvent ev) =>");
        sb.AppendLine("            ev.GetPayload() switch");
        sb.AppendLine("        {");

        foreach (var type in eventTypes)
        {
            switch (type.InterfaceName, type.TypeCount)
            {
                case ("IEventPayload", 0):
                    var typeName = type.RecordName.Split('.').Last();
                    sb.AppendLine($"            {type.RecordName} {typeName.ToLower()} =>");
                    sb.AppendLine(
                        $"                ResultBox.CheckNullWrapTry(() => serializer.Serialize({typeName.ToLower()})),");
                    break;
            }
        }

        sb.AppendLine("            _ => ResultBox<string>.FromException(");
        sb.AppendLine(
            "                new SekibanEventTypeNotFoundException($\"Event Type {ev.GetPayload().GetType().Name} Not Found\"))");
        sb.AppendLine("        };");

        sb.AppendLine();
        sb.AppendLine("        public List<Type> GetEventTypes()");
        sb.AppendLine("        {");
        sb.AppendLine("            return new List<Type>");
        sb.AppendLine("            {");
        foreach (var type in eventTypes)
        {
            switch (type.InterfaceName, type.TypeCount)
            {
                case ("IEventPayload", 0):
                    sb.AppendLine($"                typeof({type.RecordName}),");
                    break;
            }
        }
        sb.AppendLine("            };");
        sb.AppendLine("        }");

        sb.AppendLine("    }");
        sb.AppendLine("/***");
        sb.AppendLine("    [JsonSourceGenerationOptions(PropertyNamingPolicy = JsonKnownNamingPolicy.CamelCase)]");
        sb.AppendLine("    [JsonSerializable(typeof(EventDocumentCommon))]");
        sb.AppendLine("    [JsonSerializable(typeof(EventDocumentCommon[]))]");
        sb.AppendLine("    [JsonSerializable(typeof(Sekiban.Pure.Aggregates.EmptyAggregatePayload))]");
        sb.AppendLine("    [JsonSerializable(typeof(Sekiban.Pure.Projectors.IMultiProjectorCommon))]");
        sb.AppendLine("    [JsonSerializable(typeof(Sekiban.Pure.Documents.PartitionKeys))]");
        sb.AppendLine("    [JsonSerializable(typeof(Sekiban.Pure.Projectors.SerializableAggregateListProjector))]");
        sb.AppendLine("    [JsonSerializable(typeof(Sekiban.Pure.Aggregates.SerializableAggregate))]");
        foreach (var type in eventTypes)
        {
            sb.AppendLine($"    [JsonSerializable(typeof(EventDocument<{type.RecordName}>))]");
            sb.AppendLine($"    [JsonSerializable(typeof({type.RecordName}))]");
        }
        foreach (var type in aggregateTypes)
        {
            sb.AppendLine($"    [JsonSerializable(typeof({type.RecordName}))]");
        }
        foreach (var type in multiProjectorValues)
        {
            sb.AppendLine($"    [JsonSerializable(typeof({type.TypeName}))]");
        }
        sb.AppendLine(
            $"    public partial class {rootNamespace.Replace(".", "")}EventsJsonContext : JsonSerializerContext");
        sb.AppendLine("    {");
        sb.AppendLine("    }");
        sb.AppendLine("*****/");
        sb.AppendLine("}");

        return sb.ToString();
    }


}
